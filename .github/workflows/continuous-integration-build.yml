name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]

jobs:
  build-test-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        run: mvn -f complete/pom.xml clean package

      - name: Run tests with Maven
        run: mvn -f complete/pom.xml test

      - name: Notify Slack build start
        if: ${{ github.event_name == 'push' }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"üöÄ Build started for branch ${{ github.ref_name }}"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack tests finished
        if: always() # This ensures it runs even if tests fail
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"üß™ Tests finished for branch ${{ github.ref_name }}. Status: ${{ job.status }}"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Upload test results
        if: failure() # Upload artifacts only on failure to inspect
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: complete/target/surefire-reports/*.xml

      - name: Log in to Docker Hub
        if: success()
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        if: success()
        uses: docker/build-push-action@v5
        with:
          context: . 
          file: ./Dockerfile
          push: true 
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/myjavaapp:latest


      - name: Deploy to DigitalOcean Droplet
        if: success()
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_KEY }}
          script: |
            docker stop myjavaapp || true
            docker rm myjavaapp || true
            # Pull the latest image from Docker Hub
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/myjavaapp:latest

            # Stop and remove the existing container if it exists
            docker stop myjavaapp:latest || true
            docker rm myjavaapp:latest || true

            # Run the new container
            docker run -d --name /myjavaapp -p 777:777 \
            ${{ secrets.DOCKERHUB_USERNAME }}/myjavaapp:latest

      - name: Notify Slack success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"‚úÖ Build, Push and Deploy SUCCESS"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack fail
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"‚ùå CI/CD Pipeline FAILED ‚Äì check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}